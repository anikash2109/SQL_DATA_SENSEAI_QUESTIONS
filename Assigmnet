1: select festival_name, country, ticket_type
from festivaldata

2:select festival_name,
        city,
        date
from festivaldata 
where country = 'usa'

3: select festival_name,
        ticket_type,
        price 
from festivaldata
where price>100 and country='India'

4:select festival_name,
        country,
        ticket_type
from festivaldata 
where country= 'India' or country='USA'

5: select sum(price) as total_revenue,
ticket_type
from festivaldata 
group  by ticket_type


6:select festival_name,
        max(price)
from festivaldata 
group by festival_name 
order by max(price) desc
limit 5


7:select festival_name,
        price 
from festivaldata 
order by price desc
limit 5 offset 5



8:select festival_name,
 sum(organizer_profit) as total_profit
 from festivaldata 
 where country = 'India' 
 group by festival_name
 having sum(price)>100



9:select country,
    max(organizer_profit) as max_profit 
from festivaldata
group by country



10:select ticket_type,
        sum(organizer_profit) as total_profit
from festivaldata
where country = 'India' or country='USA'
group by ticket_type
having avg(price)> 50



11:select movie_name,
        avg(rating) as rating 
from user_watch_activity 
group by movie_name
order by avg(rating) desc
limit 5 offset 3



12:select user_name,
    watch_time_minutes 
from user_watch_activity 
where watch_time_minutes between 100 and 150





13:select user_name,
        watch_time_minutes as total_watch_time
from user_watch_activity
where genre = 'Sci-fi'
order by watch_time_minutes asc
limit 1



14:select genre,
        watch_time_minutes as total_watch_time 
from user_watch_activity 
where country = 'japan'
order by total_watch_time desc
limit 1



15:select user_name,
    total_movies_watched
from user_watch_activity 
where  subscription_type = 'Premium'
order by total_movies_watched desc
limit 5



16:select transaction_id,
        customer_name,
        transaction_value 
from payment_transactions 
order by transaction_value desc
limit 5



17:




 18:select distinct payment_method,
        avg(transaction_value)
from payment_transactions
group by payment_method
order by avg(transaction_value) desc
limit 1



19:select customer_name,
        sum(transaction_value),
        case 
        when sum(transaction_value) > 2000 then 'High Spend'
        when sum(transaction_value) between 1000 and  2000 then 'Medium Spend'
        when sum(transaction_value) < 1000 then 'Low Spend'
        end total_spending 
from payment_transactions 
group  by customer_name



20:select customer_name,
        round(avg(customer_rating),2) as avg_rating
from payment_transactions 
group by customer_name 
having avg(customer_rating)<4



21: select product_name,
        product_category,
        likes_count
from amazereviews 
where likes_count> 100 and (discount_applied)<10
and (review_rating = 4 or review_rating = 5)
 



22:select product_name,
        review_rating,
        delivery_days,
        discount_applied 
from amazereviews 
where (review_rating=1 or review_rating=2)
and (delivery_days>7 or discount_applied<5)



23:select review_id,
        reviewer_name,
        review_text 
from amazereviews 
where review_text like 'great%' and review_text like '%perfectly%'



24:select distinct product_name,
        product_category
from amazereviews 
where product_name like '_l_____'



25:select product_name,
        product_price,
        likes_count
from amazereviews 
where (product_price not between 50 and 200) and
likes_count> 100



26:select product_name,
        review_rating,
        delivery_days
from amazereviews 
where (review_rating = 4 or review_rating=5) and
(verified_purchase = 'Y') and 
(delivery_days<=5)



27:select product_name,
        product_category
from amazereviews 
where product_name like 'S_________'



28:select review_id,
        reviewer_name,
        review_text 
from amazereviews 
where (review_text like 'G%' and review_text like '%price%' )and 
 (review_text like '%_____quality%')



29: select distinct product_name,
        review_text,
        product_price,
        review_rating
from amazereviews 
where (review_text not like '%great%' or review_rating not like '%good%')
and (product_price not between 10 and 100)
and (review_rating=1 or review_rating=2)



30:select review_id,
        product_name,
        review_text,
        product_price,
        likes_count 
from amazereviews 
where (review_text like '%word%' or review_text like 'A%')
and (product_price between 20 and 200)
and (review_text not like '%poor%')
and (likes_count>50)



31:select room_type,
        sum(total_amount) as total_revenue 
from hotelbookings 
group by room_type 
order by total_revenue desc



32:select 
        case
        when breakfast_included = 1 then 'with  breakfast'
        when breakfast_included = 0 then 'without breakfast'
        end breakfast_option,
        avg(feedback_score ) as average_feedback
from hotelbookings 
group by breakfast_option



33: select guest_name,
        max(total_amount) as total_amount,
        membership_level
from hotelbookings
group by guest_name,membership_level 
order by max(total_amount) desc
limit 5



34:select count(booking_id) as number_of_bookings,
        membership_level 
from hotelbookings 
group by membership_level



35:select city,
        sum(total_amount) as total_revenue       (Not got Correct on website just code)
from hotelbookings
where feedback_score>=7 and (total_guests<2)
group by city 
having count(booking_id)=3
order by total_revenue desc




36:select city,
    sum(total_amount) as total_revenue,
    guest_name 
from hotelbookings 
where membership_level = 'platinum'
group by city, guest_name



37:select city,
        sum(total_amount) as total_Strict_Revenue,
        count(booking_id) as booking_count,
        case 
        when sum(total_amount)>40000 then 'High Revenue'     (Not got Correct on website just code)
        else 'Low Revenue'
        end revenue_category
from hotelbookings 
where cancellation_policy = 'strict'
group by city 
having count(booking_id) = 2



38:select membership_level,
        avg(feedback_score) as avg_feedback,
        case 
        when avg(feedback_score)>=9 then 'Excellent Feedback'
        when avg(feedback_score)between 7 and 9 then 'Good Feedback'    (giving me incorrect/ output is correct)
        when avg(feedback_score)<7 then 'Needs Improvement'
        end feedback_category
from hotelbookings 
group by membership_level
having count(booking_id)>=5 
order  by avg(feedback_score) desc


39: select 
case 
when total_guests between 1 and 2 then 'Small group'
when total_guests between 3 and 4 then 'Medium group'
when total_guests >5  then 'Large group'
end group_category,
sum(total_amount) as total_revenue,
sum(total_amount)*100/(select sum(total_guests) from hotelbookings) as reveue_percentage
from hotelbookings
group by 
        case
        when  total_guests between 1 and 2 then 'Small group'
        when total_guests between 3 and 4 then 'Medium group'
        when total_guests >5  then 'Large group'
    end 
having reveue_percentage>30
order by total_revenue desc



40:





41: select book_title, 
        sum(sales_amount) as sales_amount,
        sum(sales_count) as sales_count,
        publisher
from bookreviews 
where (book_title like '%Love%' or book_title like '%Heart%') 
group by book_title, publisher
having sum(sales_amount)>3000 and 
sum(sales_count)>100



42:select genre,
        avg(rating) as avg_rating,
        sum(sales_amount)
from bookreviews 
where genre like 'R%'
group by genre 
having avg(rating)>=4



43:select author_name, 
        sum(sales_count)
from bookreviews 
where review_text like '%Masterpiece%'
group by author_name
having sum(sales_count)>150
order by sum(sales_count) desc



44:select publisher,
    sum(sales_amount),
    sum(sales_count)
from bookreviews 
where (review_text like '%Fantastic%' or review_text like '%Thrilling%')
group by publisher
having sum(sales_amount)>3000 and 
sum(sales_count)>100
order by sum(sales_amount) desc



45:select book_title,
        genre,
        sum(sales_amount),
        avg(rating) as avg_rating 
from bookreviews 
where genre = 'Science' and 
(review_text  like '%plot%' or review_text like '%inspiring%')
group by genre, book_title
having sum(sales_amount)>3000



46:select membership_type,
        sum(session_revenue),
        case
        when sum(session_revenue)>300 then 'High Revenue'
         when sum(session_revenue) between 150 and 300 then 'Medium Revenue'
        else 'Low Revenue'
        end Revenue_category
from workoutanalytics 
group by membership_type



47:select session_type,
        avg(workout_duration) as avg_duration,
        avg(calories_burned) as avg_calories, 
        case 
        when avg(workout_duration)>75 then 'High Intensity'
        when avg(workout_duration) between 45 and 75 then 'Medium Intensity'
        else 'low intensity'
        end intensity_level 
from workoutanalytics 
group by session_type 




48:select trainer_session,
        avg(satisfaction_rating) as avg_satisfaction,
        case
        when avg(satisfaction_rating)>= 4.5 then 'Excellent'
        when avg(satisfaction_rating) between 3.5 and  4.5 then 'Good'
        else 'Needs Improvement'
        end rating_quality 
from workoutanalytics
group by trainer_session



49:select workout_id,
        session_type,
        workout_duration,
        session_revenue,
        case 
        when session_revenue>40 and workout_duration>60 then 'High Value'
        else 'Regular Value'
        end value_category
from workoutanalytics 



50:select trainer_session,
        sum(calories_burned) as total_calories,
        count(session_type) as  total_sessions,
        case 
        when sum(calories_burned) > 4000 then 'High Impact'
        when sum(calories_burned) between 2000 and 4000 then 'Medium Impact'
        else 'Low impact'
        end trainer_impact 
from workoutanalytics
where trainer_session = 'Y' 
group by trainer_session 




51:select date(order_delivered_timestamp),
       count(order_id) as  total_deliveries 
from deliverydash
group by date(order_delivered_timestamp)
order by count(order_id) desc 
limit 1



52: select delivery_agent,
        avg(minute(actual_delivery_time)) as delivery_time    (Not sure, Not Correct)   
from deliverydash 
group by delivery_agent 
order by avg(minute(actual_delivery_time)) desc 
limit 3

(SELECT 
    Delivery_Agent, 
    AVG(TIME_TO_SEC(Actual_Delivery_Time)) / 60 AS Average_Delivery_Time_Minutes     (correct querry)
FROM 
    DeliveryDash
GROUP BY 
    Delivery_Agent
ORDER BY 
    Average_Delivery_Time_Minutes DESC
LIMIT 3;)



53:select date(order_delivered_timestamp),
 sum(order_amount) as total_revenue
from deliverydash 
group by date(order_delivered_timestamp)
having sum(order_amount)>50



54:select city,
    max(order_delivered_timestamp) as latest_delivery_time,
    min(order_delivered_timestamp) as earliest_delivery_time
from deliverydash 
group by city 



55:






56: select date(order_delivered_timestamp) as delivery_date,
        sum(order_amount) as total_revenue 
from deliverydash 
group by date(order_delivered_timestamp)
order by sum(order_amount) desc
limit 1



57:select order_id,
        customer_name,
        order_delivered_timestamp,
        city 
from deliverydash 
where dayofweek(order_delivered_timestamp) in (1,7)



58:





59:select order_id,
        customer_name,
        order_placed_timestamp,
        city 
from deliverydash 
where order_placed_timestamp>= date_sub('2024-06-30', interval 7 day)




60:select count(order_id),
        hour(order_delivered_timestamp)
from deliverydash 
group by hour(order_delivered_timestamp)
order by hour(order_delivered_timestamp) asc



61: 



62:select student_name,
        course_name,
        attendance_date,
        assignment_submission_date
from edutrack 
where assignment_submission_date> attendance_date - interval 2 day



63:select date_format(attendance_date, '%Y-%m') as month,
        count(attendance_id) as total_attendance
from edutrack 
where attendance_status='Present'
group by date_format(attendance_date, '%Y-%m')





64:select student_name,
       exam_score,
        case
        when exam_score>=85 then 'High'
        when exam_score between 70 and 84 then 'Medium'
        when exam_score<70 then 'Low'
        end performance_tier 
from edutrack 




65:select Student_Name, Course_Name,
Assignment_Submission_Date, Exam_Date,
Datediff(exam_date , Assignment_Submission_Date)
from edutrack
where Assignment_Submission_Date = Date_sub(exam_date , interval 12 Day);



66: 







69:





81:select model_name,
        active_users_thousand
from llm_development
where active_users_thousand<(select active_users_thousand
from llm_development where inference_speed_tokens_per_sec=(select max(inference_speed_tokens_per_sec) from llm_development))




82: select model_name,
       training_duration_days 
from llm_development 
where training_duration_days>
 (select min(training_duration_days) from llm_development
 where fine_tuned=1)




83:select model_name,
       usage_count_million
from llm_development 
where  usage_count_million>(select avg(usage_count_million)*2 from llm_development
where model_status = 'Retired')



84: select model_name,
        training_data_size_gb
from llm_development 
where training_data_size_gb<(select avg(training_data_size_gb)from llm_development
where year(release_date)='2023')



85:select model_name,
        training_data_size_gb
from llm_development 
where training_data_size_gb<(select max(training_data_size_gb)
from llm_development where year(release_date)='2023')


86:select model_name,
        accuracy_percent,
        training_duration_days
from llm_development 
where accuracy_percent>90 and 
training_duration_days<(select avg(training_duration_days) from llm_development)




87:select model_name,
        training_data_size_gb
from llm_development 
where training_data_size_gb>(select avg(training_data_size_gb)
from llm_development where year(release_date)<'2022')



88:select model_name,
        inference_speed_tokens_per_sec
from llm_development 
where inference_speed_tokens_per_sec<(select inference_speed_tokens_per_sec 
 from llm_development where parameters_in_billion=(select min(parameters_in_billion) from llm_development))



89:select model_name,
        accuracy_percent
from llm_development 
where accuracy_percent> all (select accuracy_percent from 
llm_development where year(release_date)='2021')




90:SELECT model_name,
       training_duration_days
FROM llm_development
WHERE training_duration_days > (
    SELECT (MIN(training_duration_days) + MAX(training_duration_days)) / 2
    FROM llm_development
    WHERE fine_tuned = 1
);



91:select team_name,
       win_rate_percent 
from esports_tournament 
where win_rate_percent >(select avg(win_rate_percent)
from esports_tournament where tournament_name = 'World Cup')




92:






93:select team_name,
        participation_fee_usd
from esports_tournament
where participation_fee_usd> all(select avg(participation_fee_usd)
from esports_tournament)




94:






95:select team_name,
        matches_won
from esports_tournament 
where matches_won<(select sum(matches_played)-sum(matches_won) from
esports_tournament)




96:






97: select team_name,
    game_title,
    region,
    win_rate_percent 
from esports_tournament as a
where win_rate_percent>(select avg(win_rate_percent)
from esports_tournament as b
where a.game_title=b.game_title and 
a.region=b.region)




98:select team_name,
        game_title,
        avg_match_duration_minutes
from esports_tournament as a                           (chat Gpt)
where avg_match_duration_minutes>
(select min(avg_match_duration_minutes) from
esports_tournament as b where team_ranking<5
and a.game_title=b.game_title )




99:SELECT team_name,
       tournament_name,                                 (chat gpt)
       total_deaths
FROM esports_tournament AS a
WHERE total_deaths > (
    SELECT AVG(total_kills)
    FROM esports_tournament AS b
    WHERE a.tournament_name = b.tournament_name
);




100: select team_name,
    Region,
    matches_won,
    win_rate_percent,
    participation_fee_usd 
from esports_tournament 
where (matches_won<5) and 
(win_rate_percent<40) and (participation_fee_usd>3000) and 
(Region='NA' or Region='EU')




101:select comment_id,
        user_name,
        substring(comment_text, 1,10 ) as preview_text 
from socialhub_comments 



102: select comment_id,
        user_name,
        comment_text
from socialhub_comments
where comment_text like '%the%'




103:select comment_id,
        user_name,
        substring_index(mentions, '@', -1)
from socialhub_comments
where substring_index(mentions, '@', -1) is not null




104: select comment_id,
        user_name,
        reverse(comment_text)
from socialhub_comments 
where sentiment='Negative'





105: select comment_id,
       replace(mentions, '@', '(at)')
from socialhub_comments 



106:select comment_id,
       hashtags
from socialhub_comments 
where hashtags regexp'work'



107: select substring_index(email, '@', -1),
count(distinct(user_name))
from socialhub_comments
group by substring_index(email,'@', -1)




108:select substring_index(email, '@', -1),
count(distinct(user_name))
from socialhub_comments
group by substring_index(email, '@', -1)





109:  select comment_id,
user_name,
substring(replace(replace(replace(replace(replace(reverse
(comment_text),'a', '*'),'e','*'),'i', '*'),'o','*'),'u','*'),1,20)
from socialhub_comments
where platform='Instagram'



110:








111:select year(concert_date) as concert_year,
        month(concert_date) as concert_month,
        sum(revenue) 
from global_concert_tour 
where concert_date>= last_day(concert_date)- interval 4 day and       (chatGpt) 
concert_date <= last_day(concert_date)
group by year(concert_date),
        month(concert_date)




112: SELECT 
    YEAR(concert_date) AS concert_year,
    MONTH(concert_date) AS concert_month,                        (chatgpt)
    AVG(tickets_sold) AS avg_tickets_sold
FROM 
    global_concert_tour
WHERE 
    DAY(concert_date) BETWEEN 1 AND 7
GROUP BY 
    YEAR(concert_date),
    MONTH(concert_date);


113:select year(concert_date),
    monthname(concert_date),
    month(concert_date),
    case 
    when day(concert_date) <=15 then 'first half'
    else 'second half'
    end as interval_period,
    sum(revenue)
from global_concert_tour
group by year(concert_date), monthname(concert_date),month(concert_date), interval_period
order by month(concert_date),sum(revenue) asc



114:select year(concert_date),
        case
        when month(concert_date) between 1 and 3 then 1
        when month(concert_date) between 4 and 6 then 2
        when month(concert_date) between 7 and 9 then 3
        when month(concert_date) between 10 and 12 then 4 
        end as concert_quater,
        sum(revenue) as total_revenue 
from global_concert_tour 
group by year(concert_date), concert_quater




115: select year(concert_date),
        monthname(concert_date),
        singer,
        location,
        concert_date,
        revenue
from global_concert_tour
where weekday(concert_date) in (5,6)




116: select year(concert_date),
        monthname(concert_date),
        month(concert_date),
        sum(revenue)
from global_concert_tour 
where concert_date>= last_day(concert_date)- interval 10 day 
group by year(concert_date),
        monthname(concert_date),
        month(concert_date)
order by month(concert_date)




117:select year(concert_date),
        monthname(concert_date),
        avg(revenue)
from global_concert_tour 
where concert_date> last_day(concert_date)-interval 5 day 
group by year(concert_date),monthname(concert_date)
order by year(concert_date), monthname(concert_date)



118: 

119:


120:select year(concert_date),
        month(concert_date),
        singer,
        sum(revenue),
        sum(revenue)*100/(select sum(revenue) from global_concert_tour)
from global_concert_tour 
group by year(concert_date),
        month(concert_date),
        singer



121:select battle_name,
        attendance_capacity 
from battles 
where attendance_capacity=(select max(attendance_capacity) from battles)



122: 






123:select battle_name,
        budget 
from battles 
where budget >(select avg(budget) from battles)



124:




125:select battle_name,
       weather_condition 
from battles as a
where weather_condition in(select weather_condition
from battles where budget=(select max(budget) from
battles))




126:select battle_name,
        max(attendance_capacity)
from battles 
group by battle_name
order by max(attendance_capacity) desc
limit 1 offset 1




127:select battle_name,
     max(day(Reenactment_End_Date)-day(Reenactment_start_Date)) as duration
from battles
group by battle_name
order by max(day(Reenactment_End_Date)-day(Reenactment_start_Date)) desc
limit 1





128:select battle_name,
        min(budget)
from battles 
group by battle_name
order by min(budget)
limit 1 offset 1





129: 





130:




131: select post_id,
    replace(substring_index(hashtags,'#', 2),',','')
from social_posts



132:






133:SELECT 
    user_name,
    (likes + shares) AS engagement,
    round((likes + shares) * 100.0 / 
    (SELECT SUM(likes + shares) FROM social_posts),4) 
    AS engagement_rate
FROM 
    social_posts
order by engagement_rate desc 



134:SELECT 
    COUNT(CASE WHEN Sentiment = 'Positive' THEN 1 END) * 100.0 / COUNT(*) AS positive_percentage
FROM 
    social_posts;




135:



136:


137: select book_title,
        genre 
from bookstore_sales
where genre in (select 
genre from bookstore_sales 
group by genre 
having count(*)= 1)



138: SELECT 
    Book_Title,
    COUNT(DISTINCT Customer_Location) AS Unique_Cities
FROM 
    bookstore_sales
GROUP BY 
    Book_Title
ORDER BY 
    Unique_Cities DESC
LIMIT 1;



139: SELECT 
    author_name,
    SUM(quantity_sold) AS total_books_sold,
    SUM(quantity_sold) * 100.0 / (SELECT SUM(quantity_sold) FROM bookstore_sales) AS percentage_contribution
FROM 
    bookstore_sales
GROUP BY 
    author_name
ORDER BY 
    total_books_sold DESC;



140: select book_title
from bookstore_sales 
where length(customer_review)>                    (chatGpt)
(select avg(length(customer_review))
from bookstore_sales 
where customer_review is not null)



141:SELECT 
    book_title,
    author_name
FROM 
    bookstore_sales
WHERE 
    author_name IN (
        SELECT                                 (chatgpt)
            author_name
        FROM 
            bookstore_sales
        GROUP BY 
            author_name
        HAVING 
            COUNT(DISTINCT sale_date) >= 3
    );




142:

143:
144:





145:select author_name,
        date_format(sale_date,'%Y-%m'),
        total_revenue 
from bookstore_sales 
where author_name in (select author_name 
from bookstore_sales where total_revenue in(select 
max(total_revenue) from bookstore_sales
where sale_date >= last_day(sale_date)- interval 7 day ))



146:









    












