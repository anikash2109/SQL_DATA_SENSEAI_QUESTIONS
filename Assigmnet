1: select festival_name, country, ticket_type
from festivaldata

2:select festival_name,
        city,
        date
from festivaldata 
where country = 'usa'

3: select festival_name,
        ticket_type,
        price 
from festivaldata
where price>100 and country='India'

4:select festival_name,
        country,
        ticket_type
from festivaldata 
where country= 'India' or country='USA'

5: select sum(price) as total_revenue,
ticket_type
from festivaldata 
group  by ticket_type


6:select festival_name,
        max(price)
from festivaldata 
group by festival_name 
order by max(price) desc
limit 5


7:select festival_name,
        price 
from festivaldata 
order by price desc
limit 5 offset 5



8:select festival_name,
 sum(organizer_profit) as total_profit
 from festivaldata 
 where country = 'India' 
 group by festival_name
 having sum(price)>100



9:select country,
    max(organizer_profit) as max_profit 
from festivaldata
group by country



10:select ticket_type,
        sum(organizer_profit) as total_profit
from festivaldata
where country = 'India' or country='USA'
group by ticket_type
having avg(price)> 50



11:select movie_name,
        avg(rating) as rating 
from user_watch_activity 
group by movie_name
order by avg(rating) desc
limit 5 offset 3



12:select user_name,
    watch_time_minutes 
from user_watch_activity 
where watch_time_minutes between 100 and 150





13:select user_name,
        watch_time_minutes as total_watch_time
from user_watch_activity
where genre = 'Sci-fi'
order by watch_time_minutes asc
limit 1



14:select genre,
        watch_time_minutes as total_watch_time 
from user_watch_activity 
where country = 'japan'
order by total_watch_time desc
limit 1



15:select user_name,
    total_movies_watched
from user_watch_activity 
where  subscription_type = 'Premium'
order by total_movies_watched desc
limit 5



16:select transaction_id,
        customer_name,
        transaction_value 
from payment_transactions 
order by transaction_value desc
limit 5



17:




 18:select distinct payment_method,
        avg(transaction_value)
from payment_transactions
group by payment_method
order by avg(transaction_value) desc
limit 1



19:select customer_name,
        sum(transaction_value),
        case 
        when sum(transaction_value) > 2000 then 'High Spend'
        when sum(transaction_value) between 1000 and  2000 then 'Medium Spend'
        when sum(transaction_value) < 1000 then 'Low Spend'
        end total_spending 
from payment_transactions 
group  by customer_name



20:select customer_name,
        round(avg(customer_rating),2) as avg_rating
from payment_transactions 
group by customer_name 
having avg(customer_rating)<4



21: select product_name,
        product_category,
        likes_count
from amazereviews 
where likes_count> 100 and (discount_applied)<10
and (review_rating = 4 or review_rating = 5)
 



22:select product_name,
        review_rating,
        delivery_days,
        discount_applied 
from amazereviews 
where (review_rating=1 or review_rating=2)
and (delivery_days>7 or discount_applied<5)



23:select review_id,
        reviewer_name,
        review_text 
from amazereviews 
where review_text like 'great%' and review_text like '%perfectly%'



24:select distinct product_name,
        product_category
from amazereviews 
where product_name like '_l_____'



25:select product_name,
        product_price,
        likes_count
from amazereviews 
where (product_price not between 50 and 200) and
likes_count> 100



26:select product_name,
        review_rating,
        delivery_days
from amazereviews 
where (review_rating = 4 or review_rating=5) and
(verified_purchase = 'Y') and 
(delivery_days<=5)



27:select product_name,
        product_category
from amazereviews 
where product_name like 'S_________'



28:select review_id,
        reviewer_name,
        review_text 
from amazereviews 
where (review_text like 'G%' and review_text like '%price%' )and 
 (review_text like '%_____quality%')



29: select distinct product_name,
        review_text,
        product_price,
        review_rating
from amazereviews 
where (review_text not like '%great%' or review_rating not like '%good%')
and (product_price not between 10 and 100)
and (review_rating=1 or review_rating=2)



30:select review_id,
        product_name,
        review_text,
        product_price,
        likes_count 
from amazereviews 
where (review_text like '%word%' or review_text like 'A%')
and (product_price between 20 and 200)
and (review_text not like '%poor%')
and (likes_count>50)



31:select room_type,
        sum(total_amount) as total_revenue 
from hotelbookings 
group by room_type 
order by total_revenue desc



32:select 
        case
        when breakfast_included = 1 then 'with  breakfast'
        when breakfast_included = 0 then 'without breakfast'
        end breakfast_option,
        avg(feedback_score ) as average_feedback
from hotelbookings 
group by breakfast_option



33: select guest_name,
        max(total_amount) as total_amount,
        membership_level
from hotelbookings
group by guest_name,membership_level 
order by max(total_amount) desc
limit 5



34:select count(booking_id) as number_of_bookings,
        membership_level 
from hotelbookings 
group by membership_level



35:select city,
        sum(total_amount) as total_revenue       (Not got Correct on website just code)
from hotelbookings
where feedback_score>=7 and (total_guests<2)
group by city 
having count(booking_id)=3
order by total_revenue desc




36:select city,
    sum(total_amount) as total_revenue,
    guest_name 
from hotelbookings 
where membership_level = 'platinum'
group by city, guest_name



37:select city,
        sum(total_amount) as total_Strict_Revenue,
        count(booking_id) as booking_count,
        case 
        when sum(total_amount)>40000 then 'High Revenue'     (Not got Correct on website just code)
        else 'Low Revenue'
        end revenue_category
from hotelbookings 
where cancellation_policy = 'strict'
group by city 
having count(booking_id) = 2



38:select membership_level,
        avg(feedback_score) as avg_feedback,
        case 
        when avg(feedback_score)>=9 then 'Excellent Feedback'
        when avg(feedback_score)between 7 and 9 then 'Good Feedback'    (giving me incorrect/ output is correct)
        when avg(feedback_score)<7 then 'Needs Improvement'
        end feedback_category
from hotelbookings 
group by membership_level
having count(booking_id)>=5 
order  by avg(feedback_score) desc


39: select 
case 
when total_guests between 1 and 2 then 'Small group'
when total_guests between 3 and 4 then 'Medium group'
when total_guests >5  then 'Large group'
end group_category,
sum(total_amount) as total_revenue,
sum(total_amount)*100/(select sum(total_guests) from hotelbookings) as reveue_percentage
from hotelbookings
group by 
        case
        when  total_guests between 1 and 2 then 'Small group'
        when total_guests between 3 and 4 then 'Medium group'
        when total_guests >5  then 'Large group'
    end 
having reveue_percentage>30
order by total_revenue desc



40:





41: select book_title, 
        sum(sales_amount) as sales_amount,
        sum(sales_count) as sales_count,
        publisher
from bookreviews 
where (book_title like '%Love%' or book_title like '%Heart%') 
group by book_title, publisher
having sum(sales_amount)>3000 and 
sum(sales_count)>100



42:select genre,
        avg(rating) as avg_rating,
        sum(sales_amount)
from bookreviews 
where genre like 'R%'
group by genre 
having avg(rating)>=4



43:select author_name, 
        sum(sales_count)
from bookreviews 
where review_text like '%Masterpiece%'
group by author_name
having sum(sales_count)>150
order by sum(sales_count) desc



44:select publisher,
    sum(sales_amount),
    sum(sales_count)
from bookreviews 
where (review_text like '%Fantastic%' or review_text like '%Thrilling%')
group by publisher
having sum(sales_amount)>3000 and 
sum(sales_count)>100
order by sum(sales_amount) desc



45:select book_title,
        genre,
        sum(sales_amount),
        avg(rating) as avg_rating 
from bookreviews 
where genre = 'Science' and 
(review_text  like '%plot%' or review_text like '%inspiring%')
group by genre, book_title
having sum(sales_amount)>3000



46:select membership_type,
        sum(session_revenue),
        case
        when sum(session_revenue)>300 then 'High Revenue'
         when sum(session_revenue) between 150 and 300 then 'Medium Revenue'
        else 'Low Revenue'
        end Revenue_category
from workoutanalytics 
group by membership_type



47:select session_type,
        avg(workout_duration) as avg_duration,
        avg(calories_burned) as avg_calories, 
        case 
        when avg(workout_duration)>75 then 'High Intensity'
        when avg(workout_duration) between 45 and 75 then 'Medium Intensity'
        else 'low intensity'
        end intensity_level 
from workoutanalytics 
group by session_type 




48:select trainer_session,
        avg(satisfaction_rating) as avg_satisfaction,
        case
        when avg(satisfaction_rating)>= 4.5 then 'Excellent'
        when avg(satisfaction_rating) between 3.5 and  4.5 then 'Good'
        else 'Needs Improvement'
        end rating_quality 
from workoutanalytics
group by trainer_session



49:select workout_id,
        session_type,
        workout_duration,
        session_revenue,
        case 
        when session_revenue>40 and workout_duration>60 then 'High Value'
        else 'Regular Value'
        end value_category
from workoutanalytics 



50:select trainer_session,
        sum(calories_burned) as total_calories,
        count(session_type) as  total_sessions,
        case 
        when sum(calories_burned) > 4000 then 'High Impact'
        when sum(calories_burned) between 2000 and 4000 then 'Medium Impact'
        else 'Low impact'
        end trainer_impact 
from workoutanalytics
where trainer_session = 'Y' 
group by trainer_session 




51:select date(order_delivered_timestamp),
       count(order_id) as  total_deliveries 
from deliverydash
group by date(order_delivered_timestamp)
order by count(order_id) desc 
limit 1



52: select delivery_agent,
        avg(minute(actual_delivery_time)) as delivery_time    (Not sure, Not Correct)   
from deliverydash 
group by delivery_agent 
order by avg(minute(actual_delivery_time)) desc 
limit 3
(SELECT 
    Delivery_Agent, 
    AVG(TIME_TO_SEC(Actual_Delivery_Time)) / 60 AS Average_Delivery_Time_Minutes     (correct querry)
FROM 
    DeliveryDash
GROUP BY 
    Delivery_Agent
ORDER BY 
    Average_Delivery_Time_Minutes DESC
LIMIT 3;)



53:select date(order_delivered_timestamp),
 sum(order_amount) as total_revenue
from deliverydash 
group by date(order_delivered_timestamp)
having sum(order_amount)>50



54:select city,
    max(order_delivered_timestamp) as latest_delivery_time,
    min(order_delivered_timestamp) as earliest_delivery_time
from deliverydash 
group by city 



55:






56: select date(order_delivered_timestamp) as delivery_date,
        sum(order_amount) as total_revenue 
from deliverydash 
group by date(order_delivered_timestamp)
order by sum(order_amount) desc
limit 1



57:select order_id,
        customer_name,
        order_delivered_timestamp,
        city 
from deliverydash 
where dayofweek(order_delivered_timestamp) in (1,7)



58:





59:select order_id,
        customer_name,
        order_placed_timestamp,
        city 
from deliverydash 
where order_placed_timestamp>= date_sub('2024-06-30', interval 7 day)




60:select count(order_id),
        hour(order_delivered_timestamp)
from deliverydash 
group by hour(order_delivered_timestamp)
order by hour(order_delivered_timestamp) asc



61: 



62:select student_name,
        course_name,
        attendance_date,
        assignment_submission_date
from edutrack 
where assignment_submission_date> attendance_date - interval 2 day



63:select date_format(attendance_date, '%Y-%m') as month,
        count(attendance_id) as total_attendance
from edutrack 
where attendance_status='Present'
group by date_format(attendance_date, '%Y-%m')





64:select student_name,
       exam_score,
        case
        when exam_score>=85 then 'High'
        when exam_score between 70 and 84 then 'Medium'
        when exam_score<70 then 'Low'
        end performance_tier 
from edutrack 




65:select Student_Name, Course_Name,
Assignment_Submission_Date, Exam_Date,
Datediff(exam_date , Assignment_Submission_Date)
from edutrack
where Assignment_Submission_Date = Date_sub(exam_date , interval 12 Day);



66: 







69:










